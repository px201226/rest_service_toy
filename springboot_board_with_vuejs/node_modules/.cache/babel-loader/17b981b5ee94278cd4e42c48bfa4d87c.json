{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\src\\store\\post.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\src\\store\\post.js","mtime":1610953132660},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Lee-Gi-Su/IdeaProjects/restapi/springboot_board_with_vuejs/src/store/post.js"],"names":["getPostsList","writePost","deletePost","updatePost","getPost","setTokenInLocalStorage","setSnackBarInfo","router","state","page","posts","post","getters","GET_PAGE","GET_POST_LIST","mutations","ADD_POST_LIST","concat","SET_PAGE","CLEAR_POST","actions","QUERY_POST_LIST","context","commit","response","data","content","Promise","reject","QUERY_GET_POST","postId","QUERY_DELETE_POST","id","title","message","option1","QUERY_WRITE_POST","req","QUERY_UPDATE_POST","console","log","push"],"mappings":"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","sourcesContent":["import { getPostsList, writePost, deletePost,updatePost, getPost } from \"../api/post_api\";\nimport {setTokenInLocalStorage} from \"./token\"\nimport {setSnackBarInfo} from \"../api/common_api\"\nimport router from \"../router\";\n\n// state\nconst state = {\n  // 페이지 정보  \n  page:{\n   \n  },\n\n  // 포스트 리스트\n  posts: [],\n\n  post:{},\n};\n\n// getters\nconst getters = {\n\n  GET_PAGE(state){\n    return state.page;\n  },\n\n  GET_POST_LIST(state) {\n    return state.posts;\n  },\n\n\n\n};\n\n// mutations\nconst mutations = {\n  ADD_POST_LIST(state, posts) {\n    state.posts = state.posts.concat(posts);\n  },\n\n  SET_PAGE(state, page){\n    state.page = page;\n  },\n  \n  CLEAR_POST(state){\n    state.page = {};\n    state.posts = [];\n  }\n\n};\n\n// actions\nconst actions = {\n\n  async QUERY_POST_LIST(context, page) {\n    try {\n      context.commit('START_LOADING')\n      const response = await getPostsList(page);\n      context.commit(\"ADD_POST_LIST\", response.data.content);\n      context.commit(\"SET_PAGE\", response.data.page);\n      return  response.data.content;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n\n  async QUERY_GET_POST(context, postId) {\n    try {\n      context.commit('START_LOADING')\n      const response = await getPost(postId);\n      return  response.data;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n\n  async QUERY_DELETE_POST(context,id) {\n    try {\n      context.commit('START_LOADING')\n      const response = await deletePost(id);\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('게시물이 삭제되었습니다.', 'success', 'top'))\n      return response.data;\n    } catch (e) {\n      context.commit('OPEN_MODAL', {title: '에러', content: e.response.message, option1: '닫기',});\n      return Promise.reject(e);\n    }\n  },\n\n  \n\n  async QUERY_WRITE_POST(context, req) {\n    try {\n      context.commit('START_LOADING')\n      const response = await writePost(req);\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('게시물이 작성되었습니다.', 'success', 'top'))\n      return response.data;\n    } catch (e) {\n      context.commit('OPEN_MODAL', {title: '에러', content: e.response.data.message, option1: '닫기',});\n      return Promise.reject(e);\n    } finally {\n    }\n  },\n\n  async QUERY_UPDATE_POST(context, req) {\n    try {\n      context.commit('START_LOADING')\n      const response = await updatePost(req.id, req);\n      console.log(response)\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('게시물이 수정되었습니다.', 'success', 'top'))\n      router.push(\"/\");\n      return response.data;\n    } catch (e) {\n      context.commit('OPEN_MODAL', {title: '에러', content: e.response.message, option1: '닫기',});\n      return Promise.reject(e);\n      } finally {\n    }\n  },\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"]}]}