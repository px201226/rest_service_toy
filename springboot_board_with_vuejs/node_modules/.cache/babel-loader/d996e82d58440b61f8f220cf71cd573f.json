{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\vuetify\\lib\\components\\VCalendar\\mixins\\calendar-with-events.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\vuetify\\lib\\components\\VCalendar\\mixins\\calendar-with-events.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiQzovVXNlcnMvTGVlLUdpLVN1L0lkZWFQcm9qZWN0cy9zcHJpbmdib290LWJvYXJkLXZ1ZS9iYWNrZW5kL3NwcmluZ2Jvb3RfYm9hcmRfd2l0aF92dWVqcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7Ci8vIFN0eWxlcwppbXBvcnQgIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZDYWxlbmRhci9taXhpbnMvY2FsZW5kYXItd2l0aC1ldmVudHMuc2FzcyI7IC8vIERpcmVjdGl2ZXMKCmltcG9ydCByaXBwbGUgZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUnOyAvLyBNaXhpbnMKCmltcG9ydCBDYWxlbmRhckJhc2UgZnJvbSAnLi9jYWxlbmRhci1iYXNlJzsgLy8gSGVscGVycwoKaW1wb3J0IHsgZXNjYXBlSFRNTCB9IGZyb20gJy4uLy4uLy4uL3V0aWwvaGVscGVycyc7IC8vIFV0aWwKCmltcG9ydCBwcm9wcyBmcm9tICcuLi91dGlsL3Byb3BzJzsKaW1wb3J0IHsgQ2FsZW5kYXJFdmVudE92ZXJsYXBNb2RlcyB9IGZyb20gJy4uL21vZGVzJzsKaW1wb3J0IHsgZ2V0RGF5SWRlbnRpZmllciwgZGlmZk1pbnV0ZXMgfSBmcm9tICcuLi91dGlsL3RpbWVzdGFtcCc7CmltcG9ydCB7IHBhcnNlRXZlbnQgYXMgX3BhcnNlRXZlbnQsIGlzRXZlbnRTdGFydCwgaXNFdmVudE9uLCBpc0V2ZW50T3ZlcmxhcHBpbmcgfSBmcm9tICcuLi91dGlsL2V2ZW50cyc7CnZhciBXSURUSF9GVUxMID0gMTAwOwp2YXIgV0lEVEhfU1RBUlQgPSA5NTsKdmFyIE1JTlVURVNfSU5fREFZID0gMTQ0MDsKLyogQHZ1ZS9jb21wb25lbnQgKi8KCmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyQmFzZS5leHRlbmQoewogIG5hbWU6ICdjYWxlbmRhci13aXRoLWV2ZW50cycsCiAgZGlyZWN0aXZlczogewogICAgcmlwcGxlOiByaXBwbGUKICB9LAogIHByb3BzOiBwcm9wcy5ldmVudHMsCiAgY29tcHV0ZWQ6IHsKICAgIG5vRXZlbnRzOiBmdW5jdGlvbiBub0V2ZW50cygpIHsKICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzLmxlbmd0aCA9PT0gMDsKICAgIH0sCiAgICBwYXJzZWRFdmVudHM6IGZ1bmN0aW9uIHBhcnNlZEV2ZW50cygpIHsKICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzLm1hcCh0aGlzLnBhcnNlRXZlbnQpOwogICAgfSwKICAgIHBhcnNlZEV2ZW50T3ZlcmxhcFRocmVzaG9sZDogZnVuY3Rpb24gcGFyc2VkRXZlbnRPdmVybGFwVGhyZXNob2xkKCkgewogICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5ldmVudE92ZXJsYXBUaHJlc2hvbGQpOwogICAgfSwKICAgIGV2ZW50Q29sb3JGdW5jdGlvbjogZnVuY3Rpb24gZXZlbnRDb2xvckZ1bmN0aW9uKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmV2ZW50Q29sb3IgPT09ICdmdW5jdGlvbicgPyB0aGlzLmV2ZW50Q29sb3IgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLmV2ZW50Q29sb3I7CiAgICAgIH07CiAgICB9LAogICAgZXZlbnRUaW1lZEZ1bmN0aW9uOiBmdW5jdGlvbiBldmVudFRpbWVkRnVuY3Rpb24oKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmV2ZW50VGltZWQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmV2ZW50VGltZWQgOiBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICByZXR1cm4gISFldmVudFtfdGhpczIuZXZlbnRUaW1lZF07CiAgICAgIH07CiAgICB9LAogICAgZXZlbnRDYXRlZ29yeUZ1bmN0aW9uOiBmdW5jdGlvbiBldmVudENhdGVnb3J5RnVuY3Rpb24oKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmV2ZW50Q2F0ZWdvcnkgPT09ICdmdW5jdGlvbicgPyB0aGlzLmV2ZW50Q2F0ZWdvcnkgOiBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICByZXR1cm4gZXZlbnRbX3RoaXMzLmV2ZW50Q2F0ZWdvcnldOwogICAgICB9OwogICAgfSwKICAgIGV2ZW50VGV4dENvbG9yRnVuY3Rpb246IGZ1bmN0aW9uIGV2ZW50VGV4dENvbG9yRnVuY3Rpb24oKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmV2ZW50VGV4dENvbG9yID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudFRleHRDb2xvciA6IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXM0LmV2ZW50VGV4dENvbG9yOwogICAgICB9OwogICAgfSwKICAgIGV2ZW50TmFtZUZ1bmN0aW9uOiBmdW5jdGlvbiBldmVudE5hbWVGdW5jdGlvbigpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICByZXR1cm4gdHlwZW9mIHRoaXMuZXZlbnROYW1lID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudE5hbWUgOiBmdW5jdGlvbiAoZXZlbnQsIHRpbWVkRXZlbnQpIHsKICAgICAgICByZXR1cm4gZXNjYXBlSFRNTChldmVudC5pbnB1dFtfdGhpczUuZXZlbnROYW1lXSk7CiAgICAgIH07CiAgICB9LAogICAgZXZlbnRNb2RlRnVuY3Rpb246IGZ1bmN0aW9uIGV2ZW50TW9kZUZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdHlwZW9mIHRoaXMuZXZlbnRPdmVybGFwTW9kZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuZXZlbnRPdmVybGFwTW9kZSA6IENhbGVuZGFyRXZlbnRPdmVybGFwTW9kZXNbdGhpcy5ldmVudE92ZXJsYXBNb2RlXTsKICAgIH0sCiAgICBldmVudFdlZWtkYXlzOiBmdW5jdGlvbiBldmVudFdlZWtkYXlzKCkgewogICAgICByZXR1cm4gdGhpcy5wYXJzZWRXZWVrZGF5czsKICAgIH0sCiAgICBjYXRlZ29yeU1vZGU6IGZ1bmN0aW9uIGNhdGVnb3J5TW9kZSgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgcGFyc2VFdmVudDogZnVuY3Rpb24gcGFyc2VFdmVudChpbnB1dCkgewogICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7CiAgICAgIHJldHVybiBfcGFyc2VFdmVudChpbnB1dCwgaW5kZXgsIHRoaXMuZXZlbnRTdGFydCwgdGhpcy5ldmVudEVuZCwgdGhpcy5ldmVudFRpbWVkRnVuY3Rpb24oaW5wdXQpLCB0aGlzLmNhdGVnb3J5TW9kZSA/IHRoaXMuZXZlbnRDYXRlZ29yeUZ1bmN0aW9uKGlucHV0KSA6IGZhbHNlKTsKICAgIH0sCiAgICBmb3JtYXRUaW1lOiBmdW5jdGlvbiBmb3JtYXRUaW1lKHdpdGhUaW1lLCBhbXBtKSB7CiAgICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLmdldEZvcm1hdHRlcih7CiAgICAgICAgdGltZVpvbmU6ICdVVEMnLAogICAgICAgIGhvdXI6ICdudW1lcmljJywKICAgICAgICBtaW51dGU6IHdpdGhUaW1lLm1pbnV0ZSA+IDAgPyAnbnVtZXJpYycgOiB1bmRlZmluZWQKICAgICAgfSk7CiAgICAgIHJldHVybiBmb3JtYXR0ZXIod2l0aFRpbWUsIHRydWUpOwogICAgfSwKICAgIHVwZGF0ZUV2ZW50VmlzaWJpbGl0eTogZnVuY3Rpb24gdXBkYXRlRXZlbnRWaXNpYmlsaXR5KCkgewogICAgICBpZiAodGhpcy5ub0V2ZW50cyB8fCAhdGhpcy5ldmVudE1vcmUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBldmVudEhlaWdodCA9IHRoaXMuZXZlbnRIZWlnaHQ7CiAgICAgIHZhciBldmVudHNNYXAgPSB0aGlzLmdldEV2ZW50c01hcCgpOwoKICAgICAgZm9yICh2YXIgZGF0ZSBpbiBldmVudHNNYXApIHsKICAgICAgICB2YXIgX2V2ZW50c01hcCRkYXRlID0gZXZlbnRzTWFwW2RhdGVdLAogICAgICAgICAgICBwYXJlbnQgPSBfZXZlbnRzTWFwJGRhdGUucGFyZW50LAogICAgICAgICAgICBldmVudHMgPSBfZXZlbnRzTWFwJGRhdGUuZXZlbnRzLAogICAgICAgICAgICBtb3JlID0gX2V2ZW50c01hcCRkYXRlLm1vcmU7CgogICAgICAgIGlmICghbW9yZSkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICB2YXIgcGFyZW50Qm91bmRzID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgIHZhciBsYXN0ID0gZXZlbnRzLmxlbmd0aCAtIDE7CiAgICAgICAgdmFyIGhpZGUgPSBmYWxzZTsKICAgICAgICB2YXIgaGlkZGVuID0gMDsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbGFzdDsgaSsrKSB7CiAgICAgICAgICBpZiAoIWhpZGUpIHsKICAgICAgICAgICAgdmFyIGV2ZW50Qm91bmRzID0gZXZlbnRzW2ldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICBoaWRlID0gaSA9PT0gbGFzdCA/IGV2ZW50Qm91bmRzLmJvdHRvbSA+IHBhcmVudEJvdW5kcy5ib3R0b20gOiBldmVudEJvdW5kcy5ib3R0b20gKyBldmVudEhlaWdodCA+IHBhcmVudEJvdW5kcy5ib3R0b207CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGhpZGUpIHsKICAgICAgICAgICAgZXZlbnRzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgIGhpZGRlbisrOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGhpZGUpIHsKICAgICAgICAgIG1vcmUuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgbW9yZS5pbm5lckhUTUwgPSB0aGlzLiR2dWV0aWZ5LmxhbmcudCh0aGlzLmV2ZW50TW9yZVRleHQsIGhpZGRlbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG1vcmUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBnZXRFdmVudHNNYXA6IGZ1bmN0aW9uIGdldEV2ZW50c01hcCgpIHsKICAgICAgdmFyIGV2ZW50c01hcCA9IHt9OwogICAgICB2YXIgZWxlbWVudHMgPSB0aGlzLiRyZWZzLmV2ZW50czsKCiAgICAgIGlmICghZWxlbWVudHMgfHwgIWVsZW1lbnRzLmZvckVhY2gpIHsKICAgICAgICByZXR1cm4gZXZlbnRzTWFwOwogICAgICB9CgogICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgICAgIHZhciBkYXRlID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRhdGUnKTsKCiAgICAgICAgaWYgKGVsLnBhcmVudEVsZW1lbnQgJiYgZGF0ZSkgewogICAgICAgICAgaWYgKCEoZGF0ZSBpbiBldmVudHNNYXApKSB7CiAgICAgICAgICAgIGV2ZW50c01hcFtkYXRlXSA9IHsKICAgICAgICAgICAgICBwYXJlbnQ6IGVsLnBhcmVudEVsZW1lbnQsCiAgICAgICAgICAgICAgbW9yZTogbnVsbCwKICAgICAgICAgICAgICBldmVudHM6IFtdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tb3JlJykpIHsKICAgICAgICAgICAgZXZlbnRzTWFwW2RhdGVdLm1vcmUgPSBlbDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGV2ZW50c01hcFtkYXRlXS5ldmVudHMucHVzaChlbCk7CiAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gZXZlbnRzTWFwOwogICAgfSwKICAgIGdlbkRheUV2ZW50OiBmdW5jdGlvbiBnZW5EYXlFdmVudChfcmVmLCBkYXkpIHsKICAgICAgdmFyIGV2ZW50ID0gX3JlZi5ldmVudDsKICAgICAgdmFyIGV2ZW50SGVpZ2h0ID0gdGhpcy5ldmVudEhlaWdodDsKICAgICAgdmFyIGV2ZW50TWFyZ2luQm90dG9tID0gdGhpcy5ldmVudE1hcmdpbkJvdHRvbTsKICAgICAgdmFyIGRheUlkZW50aWZpZXIgPSBnZXREYXlJZGVudGlmaWVyKGRheSk7CiAgICAgIHZhciB3ZWVrID0gZGF5LndlZWs7CiAgICAgIHZhciBzdGFydCA9IGRheUlkZW50aWZpZXIgPT09IGV2ZW50LnN0YXJ0SWRlbnRpZmllcjsKICAgICAgdmFyIGVuZCA9IGRheUlkZW50aWZpZXIgPT09IGV2ZW50LmVuZElkZW50aWZpZXI7CiAgICAgIHZhciB3aWR0aCA9IFdJRFRIX1NUQVJUOwoKICAgICAgaWYgKCF0aGlzLmNhdGVnb3J5TW9kZSkgewogICAgICAgIGZvciAodmFyIGkgPSBkYXkuaW5kZXggKyAxOyBpIDwgd2Vlay5sZW5ndGg7IGkrKykgewogICAgICAgICAgdmFyIHdlZWtkYXlJZGVudGlmaWVyID0gZ2V0RGF5SWRlbnRpZmllcih3ZWVrW2ldKTsKCiAgICAgICAgICBpZiAoZXZlbnQuZW5kSWRlbnRpZmllciA+PSB3ZWVrZGF5SWRlbnRpZmllcikgewogICAgICAgICAgICB3aWR0aCArPSBXSURUSF9GVUxMOwogICAgICAgICAgICBlbmQgPSBlbmQgfHwgd2Vla2RheUlkZW50aWZpZXIgPT09IGV2ZW50LmVuZElkZW50aWZpZXI7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBlbmQgPSB0cnVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBzY29wZSA9IHsKICAgICAgICBldmVudFBhcnNlZDogZXZlbnQsCiAgICAgICAgZGF5OiBkYXksCiAgICAgICAgc3RhcnQ6IHN0YXJ0LAogICAgICAgIGVuZDogZW5kLAogICAgICAgIHRpbWVkOiBmYWxzZQogICAgICB9OwogICAgICByZXR1cm4gdGhpcy5nZW5FdmVudChldmVudCwgc2NvcGUsIGZhbHNlLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWV2ZW50JywKICAgICAgICBjbGFzczogewogICAgICAgICAgJ3YtZXZlbnQtc3RhcnQnOiBzdGFydCwKICAgICAgICAgICd2LWV2ZW50LWVuZCc6IGVuZAogICAgICAgIH0sCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIGhlaWdodDogIiIuY29uY2F0KGV2ZW50SGVpZ2h0LCAicHgiKSwKICAgICAgICAgIHdpZHRoOiAiIi5jb25jYXQod2lkdGgsICIlIiksCiAgICAgICAgICAnbWFyZ2luLWJvdHRvbSc6ICIiLmNvbmNhdChldmVudE1hcmdpbkJvdHRvbSwgInB4IikKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAnZGF0YS1kYXRlJzogZGF5LmRhdGUKICAgICAgICB9LAogICAgICAgIGtleTogZXZlbnQuaW5kZXgsCiAgICAgICAgcmVmOiAnZXZlbnRzJywKICAgICAgICByZWZJbkZvcjogdHJ1ZQogICAgICB9KTsKICAgIH0sCiAgICBnZW5UaW1lZEV2ZW50OiBmdW5jdGlvbiBnZW5UaW1lZEV2ZW50KF9yZWYyLCBkYXkpIHsKICAgICAgdmFyIGV2ZW50ID0gX3JlZjIuZXZlbnQsCiAgICAgICAgICBsZWZ0ID0gX3JlZjIubGVmdCwKICAgICAgICAgIHdpZHRoID0gX3JlZjIud2lkdGg7CgogICAgICBpZiAoZGF5LnRpbWVEZWx0YShldmVudC5lbmQpIDw9IDAgfHwgZGF5LnRpbWVEZWx0YShldmVudC5zdGFydCkgPj0gMSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdmFyIGRheUlkZW50aWZpZXIgPSBnZXREYXlJZGVudGlmaWVyKGRheSk7CiAgICAgIHZhciBzdGFydCA9IGV2ZW50LnN0YXJ0SWRlbnRpZmllciA+PSBkYXlJZGVudGlmaWVyOwogICAgICB2YXIgZW5kID0gZXZlbnQuZW5kSWRlbnRpZmllciA+IGRheUlkZW50aWZpZXI7CiAgICAgIHZhciB0b3AgPSBzdGFydCA/IGRheS50aW1lVG9ZKGV2ZW50LnN0YXJ0KSA6IDA7CiAgICAgIHZhciBib3R0b20gPSBlbmQgPyBkYXkudGltZVRvWShNSU5VVEVTX0lOX0RBWSkgOiBkYXkudGltZVRvWShldmVudC5lbmQpOwogICAgICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgodGhpcy5ldmVudEhlaWdodCwgYm90dG9tIC0gdG9wKTsKICAgICAgdmFyIHNjb3BlID0gewogICAgICAgIGV2ZW50UGFyc2VkOiBldmVudCwKICAgICAgICBkYXk6IGRheSwKICAgICAgICBzdGFydDogc3RhcnQsCiAgICAgICAgZW5kOiBlbmQsCiAgICAgICAgdGltZWQ6IHRydWUKICAgICAgfTsKICAgICAgcmV0dXJuIHRoaXMuZ2VuRXZlbnQoZXZlbnQsIHNjb3BlLCB0cnVlLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWV2ZW50LXRpbWVkJywKICAgICAgICBzdHlsZTogewogICAgICAgICAgdG9wOiAiIi5jb25jYXQodG9wLCAicHgiKSwKICAgICAgICAgIGhlaWdodDogIiIuY29uY2F0KGhlaWdodCwgInB4IiksCiAgICAgICAgICBsZWZ0OiAiIi5jb25jYXQobGVmdCwgIiUiKSwKICAgICAgICAgIHdpZHRoOiAiIi5jb25jYXQod2lkdGgsICIlIikKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdlbkV2ZW50OiBmdW5jdGlvbiBnZW5FdmVudChldmVudCwgc2NvcGVJbnB1dCwgdGltZWRFdmVudCwgZGF0YSkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRldmVudFJpcHBsZTsKCiAgICAgIHZhciBzbG90ID0gdGhpcy4kc2NvcGVkU2xvdHMuZXZlbnQ7CiAgICAgIHZhciB0ZXh0ID0gdGhpcy5ldmVudFRleHRDb2xvckZ1bmN0aW9uKGV2ZW50LmlucHV0KTsKICAgICAgdmFyIGJhY2tncm91bmQgPSB0aGlzLmV2ZW50Q29sb3JGdW5jdGlvbihldmVudC5pbnB1dCk7CiAgICAgIHZhciBvdmVybGFwc05vb24gPSBldmVudC5zdGFydC5ob3VyIDwgMTIgJiYgZXZlbnQuZW5kLmhvdXIgPj0gMTI7CiAgICAgIHZhciBzaW5nbGluZSA9IGRpZmZNaW51dGVzKGV2ZW50LnN0YXJ0LCBldmVudC5lbmQpIDw9IHRoaXMucGFyc2VkRXZlbnRPdmVybGFwVGhyZXNob2xkOwogICAgICB2YXIgZm9ybWF0VGltZSA9IHRoaXMuZm9ybWF0VGltZTsKCiAgICAgIHZhciB0aW1lU3VtbWFyeSA9IGZ1bmN0aW9uIHRpbWVTdW1tYXJ5KCkgewogICAgICAgIHJldHVybiBmb3JtYXRUaW1lKGV2ZW50LnN0YXJ0LCBvdmVybGFwc05vb24pICsgJyAtICcgKyBmb3JtYXRUaW1lKGV2ZW50LmVuZCwgdHJ1ZSk7CiAgICAgIH07CgogICAgICB2YXIgZXZlbnRTdW1tYXJ5ID0gZnVuY3Rpb24gZXZlbnRTdW1tYXJ5KCkgewogICAgICAgIHZhciBuYW1lID0gX3RoaXM2LmV2ZW50TmFtZUZ1bmN0aW9uKGV2ZW50LCB0aW1lZEV2ZW50KTsKCiAgICAgICAgaWYgKGV2ZW50LnN0YXJ0Lmhhc1RpbWUpIHsKICAgICAgICAgIGlmICh0aW1lZEV2ZW50KSB7CiAgICAgICAgICAgIHZhciB0aW1lID0gdGltZVN1bW1hcnkoKTsKICAgICAgICAgICAgdmFyIGRlbGltaXRlciA9IHNpbmdsaW5lID8gJywgJyA6ICc8YnI+JzsKICAgICAgICAgICAgcmV0dXJuICI8c3Ryb25nPiIuY29uY2F0KG5hbWUsICI8L3N0cm9uZz4iKS5jb25jYXQoZGVsaW1pdGVyKS5jb25jYXQodGltZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgX3RpbWUgPSBmb3JtYXRUaW1lKGV2ZW50LnN0YXJ0LCB0cnVlKTsKCiAgICAgICAgICAgIHJldHVybiAiPHN0cm9uZz4iLmNvbmNhdChfdGltZSwgIjwvc3Ryb25nPiAiKS5jb25jYXQobmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmFtZTsKICAgICAgfTsKCiAgICAgIHZhciBzY29wZSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc2NvcGVJbnB1dCksIHt9LCB7CiAgICAgICAgZXZlbnQ6IGV2ZW50LmlucHV0LAogICAgICAgIG91dHNpZGU6IHNjb3BlSW5wdXQuZGF5Lm91dHNpZGUsCiAgICAgICAgc2luZ2xpbmU6IHNpbmdsaW5lLAogICAgICAgIG92ZXJsYXBzTm9vbjogb3ZlcmxhcHNOb29uLAogICAgICAgIGZvcm1hdFRpbWU6IGZvcm1hdFRpbWUsCiAgICAgICAgdGltZVN1bW1hcnk6IHRpbWVTdW1tYXJ5LAogICAgICAgIGV2ZW50U3VtbWFyeTogZXZlbnRTdW1tYXJ5CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuc2V0VGV4dENvbG9yKHRleHQsIHRoaXMuc2V0QmFja2dyb3VuZENvbG9yKGJhY2tncm91bmQsIF9vYmplY3RTcHJlYWQoewogICAgICAgIG9uOiB0aGlzLmdldERlZmF1bHRNb3VzZUV2ZW50SGFuZGxlcnMoJzpldmVudCcsIGZ1bmN0aW9uIChuYXRpdmVFdmVudCkgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc2NvcGUpLCB7fSwgewogICAgICAgICAgICBuYXRpdmVFdmVudDogbmF0aXZlRXZlbnQKICAgICAgICAgIH0pOwogICAgICAgIH0pLAogICAgICAgIGRpcmVjdGl2ZXM6IFt7CiAgICAgICAgICBuYW1lOiAncmlwcGxlJywKICAgICAgICAgIHZhbHVlOiAoX3RoaXMkZXZlbnRSaXBwbGUgPSB0aGlzLmV2ZW50UmlwcGxlKSAhPSBudWxsID8gX3RoaXMkZXZlbnRSaXBwbGUgOiB0cnVlCiAgICAgICAgfV0KICAgICAgfSwgZGF0YSkpKSwgc2xvdCA/IHNsb3Qoc2NvcGUpIDogW3RoaXMuZ2VuTmFtZShldmVudFN1bW1hcnkpXSk7CiAgICB9LAogICAgZ2VuTmFtZTogZnVuY3Rpb24gZ2VuTmFtZShldmVudFN1bW1hcnkpIHsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3BsLTEnLAogICAgICAgIGRvbVByb3BzOiB7CiAgICAgICAgICBpbm5lckhUTUw6IGV2ZW50U3VtbWFyeSgpCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBnZW5QbGFjZWhvbGRlcjogZnVuY3Rpb24gZ2VuUGxhY2Vob2xkZXIoZGF5KSB7CiAgICAgIHZhciBoZWlnaHQgPSB0aGlzLmV2ZW50SGVpZ2h0ICsgdGhpcy5ldmVudE1hcmdpbkJvdHRvbTsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsKICAgICAgICBzdHlsZTogewogICAgICAgICAgaGVpZ2h0OiAiIi5jb25jYXQoaGVpZ2h0LCAicHgiKQogICAgICAgIH0sCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICdkYXRhLWRhdGUnOiBkYXkuZGF0ZQogICAgICAgIH0sCiAgICAgICAgcmVmOiAnZXZlbnRzJywKICAgICAgICByZWZJbkZvcjogdHJ1ZQogICAgICB9KTsKICAgIH0sCiAgICBnZW5Nb3JlOiBmdW5jdGlvbiBnZW5Nb3JlKGRheSkgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRldmVudFJpcHBsZTI7CgogICAgICB2YXIgZXZlbnRIZWlnaHQgPSB0aGlzLmV2ZW50SGVpZ2h0OwogICAgICB2YXIgZXZlbnRNYXJnaW5Cb3R0b20gPSB0aGlzLmV2ZW50TWFyZ2luQm90dG9tOwogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgIHN0YXRpY0NsYXNzOiAndi1ldmVudC1tb3JlIHBsLTEnLAogICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAndi1vdXRzaWRlJzogZGF5Lm91dHNpZGUKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAnZGF0YS1kYXRlJzogZGF5LmRhdGUsCiAgICAgICAgICAnZGF0YS1tb3JlJzogMQogICAgICAgIH0sCiAgICAgICAgZGlyZWN0aXZlczogW3sKICAgICAgICAgIG5hbWU6ICdyaXBwbGUnLAogICAgICAgICAgdmFsdWU6IChfdGhpcyRldmVudFJpcHBsZTIgPSB0aGlzLmV2ZW50UmlwcGxlKSAhPSBudWxsID8gX3RoaXMkZXZlbnRSaXBwbGUyIDogdHJ1ZQogICAgICAgIH1dLAogICAgICAgIG9uOiB7CiAgICAgICAgICBjbGljazogZnVuY3Rpb24gY2xpY2soKSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczcuJGVtaXQoJ2NsaWNrOm1vcmUnLCBkYXkpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIGRpc3BsYXk6ICdub25lJywKICAgICAgICAgIGhlaWdodDogIiIuY29uY2F0KGV2ZW50SGVpZ2h0LCAicHgiKSwKICAgICAgICAgICdtYXJnaW4tYm90dG9tJzogIiIuY29uY2F0KGV2ZW50TWFyZ2luQm90dG9tLCAicHgiKQogICAgICAgIH0sCiAgICAgICAgcmVmOiAnZXZlbnRzJywKICAgICAgICByZWZJbkZvcjogdHJ1ZQogICAgICB9KTsKICAgIH0sCiAgICBnZXRWaXNpYmxlRXZlbnRzOiBmdW5jdGlvbiBnZXRWaXNpYmxlRXZlbnRzKCkgewogICAgICB2YXIgc3RhcnQgPSBnZXREYXlJZGVudGlmaWVyKHRoaXMuZGF5c1swXSk7CiAgICAgIHZhciBlbmQgPSBnZXREYXlJZGVudGlmaWVyKHRoaXMuZGF5c1t0aGlzLmRheXMubGVuZ3RoIC0gMV0pOwogICAgICByZXR1cm4gdGhpcy5wYXJzZWRFdmVudHMuZmlsdGVyKGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIHJldHVybiBpc0V2ZW50T3ZlcmxhcHBpbmcoZXZlbnQsIHN0YXJ0LCBlbmQpOwogICAgICB9KTsKICAgIH0sCiAgICBpc0V2ZW50Rm9yQ2F0ZWdvcnk6IGZ1bmN0aW9uIGlzRXZlbnRGb3JDYXRlZ29yeShldmVudCwgY2F0ZWdvcnkpIHsKICAgICAgcmV0dXJuICF0aGlzLmNhdGVnb3J5TW9kZSB8fCBjYXRlZ29yeSA9PT0gZXZlbnQuY2F0ZWdvcnkgfHwgdHlwZW9mIGV2ZW50LmNhdGVnb3J5ICE9PSAnc3RyaW5nJyAmJiBjYXRlZ29yeSA9PT0gbnVsbDsKICAgIH0sCiAgICBnZXRFdmVudHNGb3JEYXk6IGZ1bmN0aW9uIGdldEV2ZW50c0ZvckRheShkYXkpIHsKICAgICAgdmFyIGlkZW50aWZpZXIgPSBnZXREYXlJZGVudGlmaWVyKGRheSk7CiAgICAgIHZhciBmaXJzdFdlZWtkYXkgPSB0aGlzLmV2ZW50V2Vla2RheXNbMF07CiAgICAgIHJldHVybiB0aGlzLnBhcnNlZEV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgcmV0dXJuIGlzRXZlbnRTdGFydChldmVudCwgZGF5LCBpZGVudGlmaWVyLCBmaXJzdFdlZWtkYXkpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRFdmVudHNGb3JEYXlBbGw6IGZ1bmN0aW9uIGdldEV2ZW50c0ZvckRheUFsbChkYXkpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICB2YXIgaWRlbnRpZmllciA9IGdldERheUlkZW50aWZpZXIoZGF5KTsKICAgICAgdmFyIGZpcnN0V2Vla2RheSA9IHRoaXMuZXZlbnRXZWVrZGF5c1swXTsKICAgICAgcmV0dXJuIHRoaXMucGFyc2VkRXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICByZXR1cm4gZXZlbnQuYWxsRGF5ICYmIChfdGhpczguY2F0ZWdvcnlNb2RlID8gaXNFdmVudE9uKGV2ZW50LCBpZGVudGlmaWVyKSA6IGlzRXZlbnRTdGFydChldmVudCwgZGF5LCBpZGVudGlmaWVyLCBmaXJzdFdlZWtkYXkpKSAmJiBfdGhpczguaXNFdmVudEZvckNhdGVnb3J5KGV2ZW50LCBkYXkuY2F0ZWdvcnkpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRFdmVudHNGb3JEYXlUaW1lZDogZnVuY3Rpb24gZ2V0RXZlbnRzRm9yRGF5VGltZWQoZGF5KSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwoKICAgICAgdmFyIGlkZW50aWZpZXIgPSBnZXREYXlJZGVudGlmaWVyKGRheSk7CiAgICAgIHJldHVybiB0aGlzLnBhcnNlZEV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgcmV0dXJuICFldmVudC5hbGxEYXkgJiYgaXNFdmVudE9uKGV2ZW50LCBpZGVudGlmaWVyKSAmJiBfdGhpczkuaXNFdmVudEZvckNhdGVnb3J5KGV2ZW50LCBkYXkuY2F0ZWdvcnkpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRTY29wZWRTbG90czogZnVuY3Rpb24gZ2V0U2NvcGVkU2xvdHMoKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIGlmICh0aGlzLm5vRXZlbnRzKSB7CiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHRoaXMuJHNjb3BlZFNsb3RzKTsKICAgICAgfQoKICAgICAgdmFyIG1vZGUgPSB0aGlzLmV2ZW50TW9kZUZ1bmN0aW9uKHRoaXMucGFyc2VkRXZlbnRzLCB0aGlzLmV2ZW50V2Vla2RheXNbMF0sIHRoaXMucGFyc2VkRXZlbnRPdmVybGFwVGhyZXNob2xkKTsKCiAgICAgIHZhciBpc05vZGUgPSBmdW5jdGlvbiBpc05vZGUoaW5wdXQpIHsKICAgICAgICByZXR1cm4gISFpbnB1dDsKICAgICAgfTsKCiAgICAgIHZhciBnZXRTbG90Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRTbG90Q2hpbGRyZW4oZGF5LCBnZXR0ZXIsIG1hcHBlciwgdGltZWQpIHsKICAgICAgICB2YXIgZXZlbnRzID0gZ2V0dGVyKGRheSk7CiAgICAgICAgdmFyIHZpc3VhbHMgPSBtb2RlKGRheSwgZXZlbnRzLCB0aW1lZCwgX3RoaXMxMC5jYXRlZ29yeU1vZGUpOwoKICAgICAgICBpZiAodGltZWQpIHsKICAgICAgICAgIHJldHVybiB2aXN1YWxzLm1hcChmdW5jdGlvbiAodmlzdWFsKSB7CiAgICAgICAgICAgIHJldHVybiBtYXBwZXIodmlzdWFsLCBkYXkpOwogICAgICAgICAgfSkuZmlsdGVyKGlzTm9kZSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTsKICAgICAgICB2aXN1YWxzLmZvckVhY2goZnVuY3Rpb24gKHZpc3VhbCwgaW5kZXgpIHsKICAgICAgICAgIHdoaWxlIChjaGlsZHJlbi5sZW5ndGggPCB2aXN1YWwuY29sdW1uKSB7CiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goX3RoaXMxMC5nZW5QbGFjZWhvbGRlcihkYXkpKTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgbWFwcGVkID0gbWFwcGVyKHZpc3VhbCwgZGF5KTsKCiAgICAgICAgICBpZiAobWFwcGVkKSB7CiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobWFwcGVkKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gY2hpbGRyZW47CiAgICAgIH07CgogICAgICB2YXIgc2xvdHMgPSB0aGlzLiRzY29wZWRTbG90czsKICAgICAgdmFyIHNsb3REYXkgPSBzbG90cy5kYXk7CiAgICAgIHZhciBzbG90RGF5SGVhZGVyID0gc2xvdHNbJ2RheS1oZWFkZXInXTsKICAgICAgdmFyIHNsb3REYXlCb2R5ID0gc2xvdHNbJ2RheS1ib2R5J107CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNsb3RzKSwge30sIHsKICAgICAgICBkYXk6IGZ1bmN0aW9uIGRheShfZGF5KSB7CiAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBnZXRTbG90Q2hpbGRyZW4oX2RheSwgX3RoaXMxMC5nZXRFdmVudHNGb3JEYXksIF90aGlzMTAuZ2VuRGF5RXZlbnQsIGZhbHNlKTsKCiAgICAgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoID4gMCAmJiBfdGhpczEwLmV2ZW50TW9yZSkgewogICAgICAgICAgICBjaGlsZHJlbi5wdXNoKF90aGlzMTAuZ2VuTW9yZShfZGF5KSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHNsb3REYXkpIHsKICAgICAgICAgICAgdmFyIHNsb3QgPSBzbG90RGF5KF9kYXkpOwoKICAgICAgICAgICAgaWYgKHNsb3QpIHsKICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuID8gY2hpbGRyZW4uY29uY2F0KHNsb3QpIDogc2xvdDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjaGlsZHJlbjsKICAgICAgICB9LAogICAgICAgICdkYXktaGVhZGVyJzogZnVuY3Rpb24gZGF5SGVhZGVyKGRheSkgewogICAgICAgICAgdmFyIGNoaWxkcmVuID0gZ2V0U2xvdENoaWxkcmVuKGRheSwgX3RoaXMxMC5nZXRFdmVudHNGb3JEYXlBbGwsIF90aGlzMTAuZ2VuRGF5RXZlbnQsIGZhbHNlKTsKCiAgICAgICAgICBpZiAoc2xvdERheUhlYWRlcikgewogICAgICAgICAgICB2YXIgc2xvdCA9IHNsb3REYXlIZWFkZXIoZGF5KTsKCiAgICAgICAgICAgIGlmIChzbG90KSB7CiAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbiA/IGNoaWxkcmVuLmNvbmNhdChzbG90KSA6IHNsb3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2hpbGRyZW47CiAgICAgICAgfSwKICAgICAgICAnZGF5LWJvZHknOiBmdW5jdGlvbiBkYXlCb2R5KGRheSkgewogICAgICAgICAgdmFyIGV2ZW50cyA9IGdldFNsb3RDaGlsZHJlbihkYXksIF90aGlzMTAuZ2V0RXZlbnRzRm9yRGF5VGltZWQsIF90aGlzMTAuZ2VuVGltZWRFdmVudCwgdHJ1ZSk7CiAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBbX3RoaXMxMC4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgICAgICBzdGF0aWNDbGFzczogJ3YtZXZlbnQtdGltZWQtY29udGFpbmVyJwogICAgICAgICAgfSwgZXZlbnRzKV07CgogICAgICAgICAgaWYgKHNsb3REYXlCb2R5KSB7CiAgICAgICAgICAgIHZhciBzbG90ID0gc2xvdERheUJvZHkoZGF5KTsKCiAgICAgICAgICAgIGlmIChzbG90KSB7CiAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoc2xvdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2hpbGRyZW47CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9Cn0pOw=="},null]}