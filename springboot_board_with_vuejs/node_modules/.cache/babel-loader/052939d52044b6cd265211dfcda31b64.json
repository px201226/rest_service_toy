{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\src\\store\\comment.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\src\\store\\comment.js","mtime":1611812085422},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL0xlZS1HaS1TdS9JZGVhUHJvamVjdHMvcmVzdGFwaS9zcHJpbmdib290X2JvYXJkX3dpdGhfdnVlanMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgeyBnZXRDb21tZW50TGlzdCwgd3JpdGVDb21tZW50LCBkZWxldGVDb21tZW50LCB1cGRhdGVDb21tZW50IH0gZnJvbSAiLi4vYXBpL2NvbW1uZXRfYXBpIjsKaW1wb3J0IHsgc2V0VG9rZW5JbkxvY2FsU3RvcmFnZSB9IGZyb20gIi4vdG9rZW4iOwppbXBvcnQgeyBzZXRTbmFja0JhckluZm8gfSBmcm9tICIuLi9hcGkvY29tbW9uX2FwaSI7CmltcG9ydCByb3V0ZXIgZnJvbSAiLi4vcm91dGVyIjsgLy8gc3RhdGUKCnZhciBzdGF0ZSA9IHsKICBjb21tZW50czogW10gLy8g7Y+s7Iqk7Yq4IOumrOyKpO2KuAoKfTsgLy8gZ2V0dGVycwoKdmFyIGdldHRlcnMgPSB7CiAgR0VUX0NPTU1FTlRfTElTVDogZnVuY3Rpb24gR0VUX0NPTU1FTlRfTElTVChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmNvbW1lbnRzOwogIH0KfTsgLy8gbXV0YXRpb25zCgp2YXIgbXV0YXRpb25zID0gewogIFNFVF9DT01NRU5TOiBmdW5jdGlvbiBTRVRfQ09NTUVOUyhzdGF0ZSwgY29tbWVudHMpIHsKICAgIHN0YXRlLmNvbW1lbnRzID0gY29tbWVudHM7CiAgfQp9OyAvLyBhY3Rpb25zCgp2YXIgYWN0aW9ucyA9IHsKICBRVUVSWV9DT01NRU5UX0xJU1Q6IGZ1bmN0aW9uIFFVRVJZX0NPTU1FTlRfTElTVChjb250ZXh0LCBwYWdlKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgnU1RBUlRfTE9BRElORycpOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBnZXRDb21tZW50TGlzdChwYWdlKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoIlNFVF9DT01NRU5TIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDk7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdChfY29udGV4dC50MCkpOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCA5XV0pOwogICAgfSkpKCk7CiAgfSwKICBRVUVSWV9ERUxFVEVfQ09NTUVOVDogZnVuY3Rpb24gUVVFUllfREVMRVRFX0NPTU1FTlQoY29udGV4dCwgcmVxKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMDsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgnU1RBUlRfTE9BRElORycpOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlQ29tbWVudChyZXEucG9zdElkLCByZXEuY29tbWVudElkKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCdPUEVOX1NOQUNLQkFSJywgc2V0U25hY2tCYXJJbmZvKCfrjJPquIAg7IKt7KCc65CY7JeI7Iq164uI64ukLicsICdzdWNjZXNzJywgJ3RvcCcpKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA5OwogICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgnT1BFTl9NT0RBTCcsIHsKICAgICAgICAgICAgICAgIHRpdGxlOiAn7JeQ65+sJywKICAgICAgICAgICAgICAgIGNvbnRlbnQ6IF9jb250ZXh0Mi50MC5yZXNwb25zZS5tZXNzYWdlLAogICAgICAgICAgICAgICAgb3B0aW9uMTogJ+uLq+q4sCcKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZWplY3QoX2NvbnRleHQyLnQwKSk7CgogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMCwgOV1dKTsKICAgIH0pKSgpOwogIH0sCiAgUVVFUllfV1JJVEVfQ09NTUVOVDogZnVuY3Rpb24gUVVFUllfV1JJVEVfQ09NTUVOVChjb250ZXh0LCByZXEpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAwOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcSk7CiAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoJ1NUQVJUX0xPQURJTkcnKTsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIHdyaXRlQ29tbWVudChyZXEucG9zdElkLCByZXEpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoJ09QRU5fU05BQ0tCQVInLCBzZXRTbmFja0JhckluZm8oJ+uMk+q4gOydtCDsnpHshLHrkJjsl4jsirXri4jri6QuJywgJ3N1Y2Nlc3MnLCAndG9wJykpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxMDsKICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KF9jb250ZXh0My50MCkpOwoKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDEzOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuZmluaXNoKDEzKTsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1swLCAxMCwgMTMsIDE1XV0pOwogICAgfSkpKCk7CiAgfSwKICBRVUVSWV9VUERBVEVfQ09NTUVOVDogZnVuY3Rpb24gUVVFUllfVVBEQVRFX0NPTU1FTlQoY29udGV4dCwgcmVxKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgdmFyIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMDsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgnU1RBUlRfTE9BRElORycpOwogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlQ29tbWVudChyZXEucG9zdElkLCByZXEuY29tbWVudElkLCB7CiAgICAgICAgICAgICAgICBjb250ZW50OiByZXEuY29udGVudAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoJ09QRU5fU05BQ0tCQVInLCBzZXRTbmFja0JhckluZm8oJ+qyjOyLnOusvOydtCDsiJjsoJXrkJjsl4jsirXri4jri6QuJywgJ3N1Y2Nlc3MnLCAndG9wJykpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDk7CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdChfY29udGV4dDQudDApKTsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxMjsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmZpbmlzaCgxMik7CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMCwgOSwgMTIsIDE0XV0pOwogICAgfSkpKCk7CiAgfQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMsCiAgZ2V0dGVyczogZ2V0dGVycwp9Ow=="},{"version":3,"sources":["C:/Users/Lee-Gi-Su/IdeaProjects/restapi/springboot_board_with_vuejs/src/store/comment.js"],"names":["getCommentList","writeComment","deleteComment","updateComment","setTokenInLocalStorage","setSnackBarInfo","router","state","comments","getters","GET_COMMENT_LIST","mutations","SET_COMMENS","actions","QUERY_COMMENT_LIST","context","page","commit","response","data","Promise","reject","QUERY_DELETE_COMMENT","req","postId","commentId","title","content","message","option1","QUERY_WRITE_COMMENT","console","log","QUERY_UPDATE_COMMENT"],"mappings":"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","sourcesContent":["import { getCommentList, writeComment, deleteComment,updateComment } from \"../api/commnet_api\";\nimport {setTokenInLocalStorage} from \"./token\"\nimport {setSnackBarInfo} from \"../api/common_api\"\nimport router from \"../router\";\n\n// state\nconst state = {\n\n  \n  comments: [],                    // 포스트 리스트\n};\n\n// getters\nconst getters = {\n\n  GET_COMMENT_LIST(state) {\n    return state.comments;\n  },\n\n};\n\n// mutations\nconst mutations = {\n\n  SET_COMMENS(state, comments){\n    state.comments = comments;\n  },\n  \n};\n\n// actions\nconst actions = {\n\n  async QUERY_COMMENT_LIST(context, page) {\n    try {\n      context.commit('START_LOADING')\n      const response = await getCommentList(page);\n      context.commit(\"SET_COMMENS\", response.data);\n      return  response.data;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n\n  async QUERY_DELETE_COMMENT(context,req) {\n    try {\n      context.commit('START_LOADING')\n      const response = await deleteComment(req.postId, req.commentId);\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('댓글 삭제되었습니다.', 'success', 'top'))\n      return response.data;\n    } catch (e) {\n      context.commit('OPEN_MODAL', {title: '에러', content: e.response.message, option1: '닫기',});\n      return Promise.reject(e);\n    }\n  },\n\n  \n\n  async QUERY_WRITE_COMMENT(context, req) {\n    try {\n      console.log(req);\n      context.commit('START_LOADING')\n      const response = await writeComment(req.postId,req);\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('댓글이 작성되었습니다.', 'success', 'top'))\n      return response.data;\n    } catch (e) {\n      //context.commit('OPEN_MODAL', {title: '에러', content: e.response.data.message, option1: '닫기',});\n      return Promise.reject(e);\n    } finally {\n    }\n  },\n\n  async QUERY_UPDATE_COMMENT(context, req) {\n    try {\n      context.commit('START_LOADING')\n      const response = await updateComment(req.postId, req.commentId, {content:req.content});\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('게시물이 수정되었습니다.', 'success', 'top'))\n      return response.data;\n    } catch (e) {\n      //context.commit('OPEN_MODAL', {title: '에러', content: e.response.message, option1: '닫기',});\n      return Promise.reject(e);\n      } finally {\n    }\n  },\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"]}]}