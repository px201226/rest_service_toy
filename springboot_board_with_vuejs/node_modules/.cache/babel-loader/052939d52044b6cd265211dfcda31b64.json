{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\src\\store\\comment.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\src\\store\\comment.js","mtime":1610350701991},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Lee-Gi-Su/IdeaProjects/restapi/springboot_board_with_vuejs/src/store/comment.js"],"names":["getCommentList","writeComment","deleteComment","updateComment","setTokenInLocalStorage","setSnackBarInfo","router","state","comments","getters","GET_COMMENT_LIST","mutations","SET_COMMENS","actions","QUERY_COMMENT_LIST","context","page","commit","response","data","content","Promise","reject","QUERY_DELETE_COMMENT","req","postId","commentId","title","message","option1","QUERY_WRITE_COMMENT","console","log","QUERY_UPDATE_COMMENT","push"],"mappings":"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","sourcesContent":["import { getCommentList, writeComment, deleteComment,updateComment } from \"../api/commnet_api\";\nimport {setTokenInLocalStorage,setSnackBarInfo} from \"./token\"\nimport router from \"../router\";\n\n// state\nconst state = {\n\n  \n  comments: [],                    // 포스트 리스트\n};\n\n// getters\nconst getters = {\n\n  GET_COMMENT_LIST(state) {\n    return state.comments;\n  },\n\n};\n\n// mutations\nconst mutations = {\n\n  SET_COMMENS(state, comments){\n    state.comments = comments;\n  },\n  \n};\n\n// actions\nconst actions = {\n\n  async QUERY_COMMENT_LIST(context, page) {\n    try {\n      context.commit('START_LOADING')\n      const response = await getCommentList(page);\n      context.commit(\"SET_COMMENS\", response.data.content);\n      return  response.data.content;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n\n  async QUERY_DELETE_COMMENT(context,req) {\n    try {\n      context.commit('START_LOADING')\n      const response = await deleteComment(req.postId, req.commentId);\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('댓글 삭제되었습니다.', 'success', 'top'))\n      return response.data;\n    } catch (e) {\n      context.commit('OPEN_MODAL', {title: '에러', content: e.response.message, option1: '닫기',});\n      return Promise.reject(e);\n    }\n  },\n\n  \n\n  async QUERY_WRITE_COMMENT(context, req) {\n    try {\n      console.log(req);\n      context.commit('START_LOADING')\n      const response = await writeComment(req.postId,req);\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('댓글이 작성되었습니다.', 'success', 'top'))\n      return response.data;\n    } catch (e) {\n      context.commit('OPEN_MODAL', {title: '에러', content: e.response.data.message, option1: '닫기',});\n      return Promise.reject(e);\n    } finally {\n    }\n  },\n\n  async QUERY_UPDATE_COMMENT(context, req) {\n    try {\n      context.commit('START_LOADING')\n      const response = await updateComment(req.postId, req.commentId, {content:req.content});\n      context.commit('OPEN_SNACKBAR', setSnackBarInfo('게시물이 수정되었습니다.', 'success', 'top'))\n      router.push(\"/\");\n      return response.data;\n    } catch (e) {\n      context.commit('OPEN_MODAL', {title: '에러', content: e.response.message, option1: '닫기',});\n      return Promise.reject(e);\n      } finally {\n    }\n  },\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"]}]}