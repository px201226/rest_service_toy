{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\src\\store\\post.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\src\\store\\post.js","mtime":1607001814888},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL0xlZS1HaS1TdS9JZGVhUHJvamVjdHMvc3ByaW5nYm9vdC1ib2FyZC12dWUvZnJvbnRlbmQvc3ByaW5nYm9vdF9ib2FyZF93aXRoX3Z1ZWpzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IHsgdXBkYXRlUG9zdHNMaXN0LCByZWFkUG9zdEJ5UG9zdElkIH0gZnJvbSAiLi4vYXBpL3Bvc3RfYXBpIjsgLy8gc3RhdGUKCnZhciBzdGF0ZSA9IHsKICBwb3N0OiB7CiAgICB0aXRsZTogIuygnOuqqSIsCiAgICBjb250ZW50OiAi67mIIOuCtOyaqSIsCiAgICBhdXRob3I6ICLsnpHshLHsnpAiLAogICAgbW9kaWZpZWREYXRlOiAi7J287J6QIgogIH0sCiAgcG9zdExpc3Q6IFtdCn07IC8vIGdldHRlcnMKCnZhciBnZXR0ZXJzID0gewogIGdldFBvc3Q6IGZ1bmN0aW9uIGdldFBvc3Qoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5wb3N0OwogIH0sCiAgR0VUX1BPU1RfTElTVDogZnVuY3Rpb24gR0VUX1BPU1RfTElTVChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnBvc3RMaXN0OwogIH0KfTsgLy8gbXV0YXRpb25zCgp2YXIgbXV0YXRpb25zID0gewogIHNldFBvc3Q6IGZ1bmN0aW9uIHNldFBvc3Qoc3RhdGUsIHBvc3QpIHsKICAgIHN0YXRlLnBvc3QgPSBwb3N0OwogIH0sCiAgU0VUX1BPU1RfTElTVDogZnVuY3Rpb24gU0VUX1BPU1RfTElTVChzdGF0ZSwgcG9zdExpc3QpIHsKICAgIHN0YXRlLnBvc3RMaXN0ID0gcG9zdExpc3Q7CiAgfQp9OyAvLyBhY3Rpb25zCgp2YXIgYWN0aW9ucyA9IHsKICBRVUVSWV9SRUFEX1BPU1Q6IGZ1bmN0aW9uIFFVRVJZX1JFQURfUE9TVChfcmVmLCBfcmVmMikgewogICAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSwKICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgIHZhciBwb3N0ID0gX3JlZjIucG9zdDsKICAgIGNvbW1pdCgic2V0UG9zdCIsIHBvc3QpOwogIH0sCiAgUVVFUllfUkVBRF9QT1NUMjogZnVuY3Rpb24gUVVFUllfUkVBRF9QT1NUMihfcmVmMywgcG9zdElkKSB7CiAgICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZSwKICAgICAgICBjb21taXQgPSBfcmVmMy5jb21taXQ7CiAgICBwb3N0ID0gcmVhZFBvc3RCeVBvc3RJZChwb3N0SWQpOwogICAgY29tbWl0KCJzZXRQb3N0IiwgcG9zdCk7CiAgfSwKICBRVUVSWV9QT1NUX0xJU1Q6IGZ1bmN0aW9uIFFVRVJZX1BPU1RfTElTVChjb250ZXh0KSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlUG9zdHNMaXN0KCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJTRVRfUE9TVF9MSVNUIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDg7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdChfY29udGV4dC50MCkpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VuZCcpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMTEpOwoKICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCA4LCAxMSwgMTRdXSk7CiAgICB9KSkoKTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgbXV0YXRpb25zOiBtdXRhdGlvbnMsCiAgYWN0aW9uczogYWN0aW9ucywKICBnZXR0ZXJzOiBnZXR0ZXJzCn07"},{"version":3,"sources":["C:/Users/Lee-Gi-Su/IdeaProjects/springboot-board-vue/frontend/springboot_board_with_vuejs/src/store/post.js"],"names":["updatePostsList","readPostByPostId","state","post","title","content","author","modifiedDate","postList","getters","getPost","GET_POST_LIST","mutations","setPost","SET_POST_LIST","actions","QUERY_READ_POST","commit","QUERY_READ_POST2","postId","QUERY_POST_LIST","context","response","data","Promise","reject","console","log"],"mappings":";;;AAAA,SAASA,eAAT,EAA0BC,gBAA1B,QAAkD,iBAAlD,C,CACA;;AACA,IAAMC,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,IADH;AAEJC,IAAAA,OAAO,EAAE,MAFL;AAGJC,IAAAA,MAAM,EAAE,KAHJ;AAIJC,IAAAA,YAAY,EAAE;AAJV,GADM;AAQZC,EAAAA,QAAQ,EAAE;AARE,CAAd,C,CAWA;;AACA,IAAMC,OAAO,GAAG;AACdC,EAAAA,OADc,mBACNR,KADM,EACC;AACb,WAAOA,KAAK,CAACC,IAAb;AACD,GAHa;AAKdQ,EAAAA,aALc,yBAKAT,KALA,EAKO;AACnB,WAAOA,KAAK,CAACM,QAAb;AACD;AAPa,CAAhB,C,CAUA;;AACA,IAAMI,SAAS,GAAG;AAChBC,EAAAA,OADgB,mBACRX,KADQ,EACDC,IADC,EACK;AACnBD,IAAAA,KAAK,CAACC,IAAN,GAAaA,IAAb;AACD,GAHe;AAKhBW,EAAAA,aALgB,yBAKFZ,KALE,EAKKM,QALL,EAKe;AAC7BN,IAAAA,KAAK,CAACM,QAAN,GAAiBA,QAAjB;AACD;AAPe,CAAlB,C,CAUA;;AACA,IAAMO,OAAO,GAAG;AACdC,EAAAA,eADc,wCAC+B;AAAA,QAA3Bd,KAA2B,QAA3BA,KAA2B;AAAA,QAApBe,MAAoB,QAApBA,MAAoB;AAAA,QAARd,IAAQ,SAARA,IAAQ;AAC3Cc,IAAAA,MAAM,CAAC,SAAD,EAAYd,IAAZ,CAAN;AACD,GAHa;AAIde,EAAAA,gBAJc,mCAIsBC,MAJtB,EAI8B;AAAA,QAAzBjB,KAAyB,SAAzBA,KAAyB;AAAA,QAAlBe,MAAkB,SAAlBA,MAAkB;AAC1Cd,IAAAA,IAAI,GAAGF,gBAAgB,CAACkB,MAAD,CAAvB;AACAF,IAAAA,MAAM,CAAC,SAAD,EAAYd,IAAZ,CAAN;AACD,GAPa;AASRiB,EAAAA,eATQ,2BASQC,OATR,EASiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEJrB,eAAe,EAFX;;AAAA;AAErBsB,cAAAA,QAFqB;AAG3BD,cAAAA,OAAO,CAACJ,MAAR,CAAe,eAAf,EAAgCK,QAAQ,CAACC,IAAzC;AAH2B,+CAIpBD,QAAQ,CAACC,IAJW;;AAAA;AAAA;AAAA;AAAA,+CAMpBC,OAAO,CAACC,MAAR,aANoB;;AAAA;AAAA;AAQ3BC,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAR2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU9B;AAnBa,CAAhB;AAsBA,eAAe;AACbzB,EAAAA,KAAK,EAALA,KADa;AAEbU,EAAAA,SAAS,EAATA,SAFa;AAGbG,EAAAA,OAAO,EAAPA,OAHa;AAIbN,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import { updatePostsList, readPostByPostId } from \"../api/post_api\";\n// state\nconst state = {\n  post: {\n    title: \"제목\",\n    content: \"빈 내용\",\n    author: \"작성자\",\n    modifiedDate: \"일자\",\n  },\n\n  postList: [],\n};\n\n// getters\nconst getters = {\n  getPost(state) {\n    return state.post;\n  },\n\n  GET_POST_LIST(state) {\n    return state.postList;\n  },\n};\n\n// mutations\nconst mutations = {\n  setPost(state, post) {\n    state.post = post;\n  },\n\n  SET_POST_LIST(state, postList) {\n    state.postList = postList;\n  },\n};\n\n// actions\nconst actions = {\n  QUERY_READ_POST({ state, commit }, { post }) {\n    commit(\"setPost\", post);\n  },\n  QUERY_READ_POST2({ state, commit }, postId) {\n    post = readPostByPostId(postId);\n    commit(\"setPost\", post);\n  },\n\n  async QUERY_POST_LIST(context) {\n    try {\n      const response = await updatePostsList();\n      context.commit(\"SET_POST_LIST\", response.data);\n      return response.data;\n    } catch (e) {\n      return Promise.reject(e);\n    } finally {\n      console.log('End');\n    }\n  },\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"]}]}