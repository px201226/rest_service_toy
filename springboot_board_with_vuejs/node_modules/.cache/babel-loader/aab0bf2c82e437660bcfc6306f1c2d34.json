{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\node_modules\\vuetify\\lib\\components\\VCalendar\\modes\\stack.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\node_modules\\vuetify\\lib\\components\\VCalendar\\modes\\stack.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\frontend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../../../../src/components/VCalendar/modes/stack.ts"],"names":[],"mappings":"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","sourcesContent":["import { CalendarEventOverlapMode, CalendarEventVisual } from 'vuetify/types'\nimport { getOverlapGroupHandler, getVisuals, hasOverlap, getNormalizedRange } from './common'\nimport { getTimestampIdentifier } from '../util/timestamp'\n\ninterface Group {\n  start: number\n  end: number\n  visuals: CalendarEventVisual[]\n}\n\ninterface Node {\n  parent: Node | null\n  sibling: boolean\n  index: number\n  visual: CalendarEventVisual\n  start: number\n  end: number\n  children: Node[]\n}\n\nconst FULL_WIDTH = 100\n\nconst DEFAULT_OFFSET = 5\n\nconst WIDTH_MULTIPLIER = 1.7\n\n/**\n * Variation of column mode where events can be stacked. The priority of this\n * mode is to stack events together taking up the least amount of space while\n * trying to ensure the content of the event is always visible as well as its\n * start and end. A sibling column has intersecting event content and must be\n * placed beside each other. Non-sibling columns are offset by 5% from the\n * previous column. The width is scaled by 1.7 so the events overlap and\n * whitespace is reduced. If there is a hole in columns the event width is\n * scaled up so it intersects with the next column. The columns have equal\n * width in the space they are given. If the event doesn't have any to the\n * right of it that intersect with it's content it's right side is extended\n * to the right side.\n */\n\nexport const stack: CalendarEventOverlapMode = (events, firstWeekday, overlapThreshold) => {\n  const handler = getOverlapGroupHandler(firstWeekday)\n\n  // eslint-disable-next-line max-statements\n  return (day, dayEvents, timed, reset) => {\n    if (!timed) {\n      return handler.getVisuals(day, dayEvents, timed, reset)\n    }\n\n    const dayStart = getTimestampIdentifier(day)\n    const visuals = getVisuals(dayEvents, dayStart)\n    const groups = getGroups(visuals, dayStart)\n\n    for (const group of groups) {\n      const nodes: Node[] = []\n\n      for (const visual of group.visuals) {\n        const child = getNode(visual, dayStart)\n        const index = getNextIndex(child, nodes)\n\n        if (index === false) {\n          const parent = getParent(child, nodes)\n          if (parent) {\n            child.parent = parent\n            child.sibling = hasOverlap(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold))\n            child.index = parent.index + 1\n            parent.children.push(child)\n          }\n        } else {\n          const [parent] = getOverlappingRange(child, nodes, index - 1, index - 1)\n          const children = getOverlappingRange(child, nodes, index + 1, index + nodes.length, true)\n\n          child.children = children\n          child.index = index\n\n          if (parent) {\n            child.parent = parent\n            child.sibling = hasOverlap(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold))\n            parent.children.push(child)\n          }\n\n          for (const grand of children) {\n            if (grand.parent === parent) {\n              grand.parent = child\n            }\n\n            const grandNext = grand.index - child.index <= 1\n            if (grandNext && child.sibling &&\n              hasOverlap(child.start, addTime(child.start, overlapThreshold), grand.start, grand.end)) {\n              grand.sibling = true\n            }\n          }\n        }\n\n        nodes.push(child)\n      }\n\n      calculateBounds(nodes, overlapThreshold)\n    }\n\n    visuals.sort((a, b) => (a.left - b.left) || (a.event.startTimestampIdentifier - b.event.startTimestampIdentifier))\n\n    return visuals\n  }\n}\n\nfunction calculateBounds (nodes: Node[], overlapThreshold: number) {\n  for (const node of nodes) {\n    const { visual, parent } = node\n    const columns = getMaxChildIndex(node) + 1\n    const spaceLeft = parent ? parent.visual.left : 0\n    const spaceWidth = FULL_WIDTH - spaceLeft\n    const offset = Math.min(DEFAULT_OFFSET, FULL_WIDTH / columns)\n    const columnWidthMultiplier = getColumnWidthMultiplier(node, nodes)\n    const columnOffset = spaceWidth / (columns - node.index + 1)\n    const columnWidth = spaceWidth / (columns - node.index + (node.sibling ? 1 : 0)) * columnWidthMultiplier\n\n    if (parent) {\n      visual.left = node.sibling\n        ? spaceLeft + columnOffset\n        : spaceLeft + offset\n    }\n\n    visual.width = hasFullWidth(node, nodes, overlapThreshold)\n      ? FULL_WIDTH - visual.left\n      : Math.min(FULL_WIDTH - visual.left, columnWidth * WIDTH_MULTIPLIER)\n  }\n}\n\nfunction getColumnWidthMultiplier (node: Node, nodes: Node[]): number {\n  if (!node.children.length) {\n    return 1\n  }\n\n  const maxColumn = node.index + nodes.length\n  const minColumn = node.children.reduce((min, c) => Math.min(min, c.index), maxColumn)\n\n  return minColumn - node.index\n}\n\nfunction getOverlappingIndices (node: Node, nodes: Node[]): number[] {\n  const indices: number[] = []\n  for (const other of nodes) {\n    if (hasOverlap(node.start, node.end, other.start, other.end)) {\n      indices.push(other.index)\n    }\n  }\n  return indices\n}\n\nfunction getNextIndex (node: Node, nodes: Node[]): number | false {\n  const indices = getOverlappingIndices(node, nodes)\n  indices.sort()\n\n  for (let i = 0; i < indices.length; i++) {\n    if (i < indices[i]) {\n      return i\n    }\n  }\n  return false\n}\n\nfunction getOverlappingRange (node: Node, nodes: Node[], indexMin: number, indexMax: number, returnFirstColumn = false): Node[] {\n  const overlapping: Node[] = []\n  for (const other of nodes) {\n    if (other.index >= indexMin && other.index <= indexMax && hasOverlap(node.start, node.end, other.start, other.end)) {\n      overlapping.push(other)\n    }\n  }\n  if (returnFirstColumn && overlapping.length > 0) {\n    const first = overlapping.reduce((min, n) => Math.min(min, n.index), overlapping[0].index)\n    return overlapping.filter(n => n.index === first)\n  }\n  return overlapping\n}\n\nfunction getParent (node: Node, nodes: Node[]): Node | null {\n  let parent: Node | null = null\n  for (const other of nodes) {\n    if (hasOverlap(node.start, node.end, other.start, other.end) && (parent === null || other.index > parent.index)) {\n      parent = other\n    }\n  }\n  return parent\n}\n\nfunction hasFullWidth (node: Node, nodes: Node[], overlapThreshold: number): boolean {\n  for (const other of nodes) {\n    if (other !== node &&\n      other.index > node.index &&\n      hasOverlap(node.start, addTime(node.start, overlapThreshold), other.start, other.end)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction getGroups (visuals: CalendarEventVisual[], dayStart: number): Group[] {\n  const groups: Group[] = []\n\n  for (const visual of visuals) {\n    const [start, end] = getNormalizedRange(visual.event, dayStart)\n    let added = false\n\n    for (const group of groups) {\n      if (hasOverlap(start, end, group.start, group.end)) {\n        group.visuals.push(visual)\n        group.end = Math.max(group.end, end)\n        added = true\n        break\n      }\n    }\n\n    if (!added) {\n      groups.push({ start, end, visuals: [visual] })\n    }\n  }\n\n  return groups\n}\n\nfunction getNode (visual: CalendarEventVisual, dayStart: number): Node {\n  const [start, end] = getNormalizedRange(visual.event, dayStart)\n\n  return {\n    parent: null,\n    sibling: true,\n    index: 0,\n    visual,\n    start,\n    end,\n    children: [],\n  }\n}\n\nfunction getMaxChildIndex (node: Node): number {\n  let max = node.index\n  for (const child of node.children) {\n    const childMax = getMaxChildIndex(child)\n    if (childMax > max) {\n      max = childMax\n    }\n  }\n  return max\n}\n\nfunction addTime (identifier: number, minutes: number): number {\n  const removeMinutes = identifier % 100\n  const totalMinutes = removeMinutes + minutes\n  const addHours = Math.floor(totalMinutes / 60)\n  const addMinutes = totalMinutes % 60\n\n  return identifier - removeMinutes + addHours * 100 + addMinutes\n}\n"],"sourceRoot":""}]}