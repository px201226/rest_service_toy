{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}