{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\src\\store\\post.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\src\\store\\post.js","mtime":1607009438658},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\springboot-board-vue\\backend\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL0xlZS1HaS1TdS9JZGVhUHJvamVjdHMvc3ByaW5nYm9vdC1ib2FyZC12dWUvYmFja2VuZC9zcHJpbmdib290X2JvYXJkX3dpdGhfdnVlanMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgeyB1cGRhdGVQb3N0c0xpc3QsIHJlYWRQb3N0QnlQb3N0SWQgfSBmcm9tICIuLi9hcGkvcG9zdF9hcGkiOyAvLyBzdGF0ZQoKdmFyIHN0YXRlID0gewogIHBvc3Q6IHsKICAgIHRpdGxlOiAi7KCc66qpIiwKICAgIGNvbnRlbnQ6ICLruYgg64K07JqpIiwKICAgIGF1dGhvcjogIuyekeyEseyekCIsCiAgICBtb2RpZmllZERhdGU6ICLsnbzsnpAiCiAgfSwKICBwb3N0TGlzdDogW10KfTsgLy8gZ2V0dGVycwoKdmFyIGdldHRlcnMgPSB7CiAgZ2V0UG9zdDogZnVuY3Rpb24gZ2V0UG9zdChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnBvc3Q7CiAgfSwKICBHRVRfUE9TVF9MSVNUOiBmdW5jdGlvbiBHRVRfUE9TVF9MSVNUKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUucG9zdExpc3Q7CiAgfQp9OyAvLyBtdXRhdGlvbnMKCnZhciBtdXRhdGlvbnMgPSB7CiAgc2V0UG9zdDogZnVuY3Rpb24gc2V0UG9zdChzdGF0ZSwgcG9zdCkgewogICAgc3RhdGUucG9zdCA9IHBvc3Q7CiAgfSwKICBTRVRfUE9TVF9MSVNUOiBmdW5jdGlvbiBTRVRfUE9TVF9MSVNUKHN0YXRlLCBwb3N0TGlzdCkgewogICAgc3RhdGUucG9zdExpc3QgPSBwb3N0TGlzdDsKICB9Cn07IC8vIGFjdGlvbnMKCnZhciBhY3Rpb25zID0gewogIFFVRVJZX1JFQURfUE9TVDogZnVuY3Rpb24gUVVFUllfUkVBRF9QT1NUKF9yZWYsIF9yZWYyKSB7CiAgICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLAogICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgdmFyIHBvc3QgPSBfcmVmMi5wb3N0OwogICAgY29tbWl0KCJzZXRQb3N0IiwgcG9zdCk7CiAgfSwKICBRVUVSWV9SRUFEX1BPU1QyOiBmdW5jdGlvbiBRVUVSWV9SRUFEX1BPU1QyKF9yZWYzLCBwb3N0SWQpIHsKICAgIHZhciBzdGF0ZSA9IF9yZWYzLnN0YXRlLAogICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgIHBvc3QgPSByZWFkUG9zdEJ5UG9zdElkKHBvc3RJZCk7CiAgICBjb21taXQoInNldFBvc3QiLCBwb3N0KTsKICB9LAogIFFVRVJZX1BPU1RfTElTVDogZnVuY3Rpb24gUVVFUllfUE9TVF9MSVNUKGNvbnRleHQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiB1cGRhdGVQb3N0c0xpc3QoKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoIlNFVF9QT1NUX0xJU1QiLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gOTsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KF9jb250ZXh0LnQwKSk7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMjsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRW5kJyk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgxMik7CgogICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDksIDEyLCAxNV1dKTsKICAgIH0pKSgpOwogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIHN0YXRlOiBzdGF0ZSwKICBtdXRhdGlvbnM6IG11dGF0aW9ucywKICBhY3Rpb25zOiBhY3Rpb25zLAogIGdldHRlcnM6IGdldHRlcnMKfTs="},{"version":3,"sources":["C:/Users/Lee-Gi-Su/IdeaProjects/springboot-board-vue/backend/springboot_board_with_vuejs/src/store/post.js"],"names":["updatePostsList","readPostByPostId","state","post","title","content","author","modifiedDate","postList","getters","getPost","GET_POST_LIST","mutations","setPost","SET_POST_LIST","actions","QUERY_READ_POST","commit","QUERY_READ_POST2","postId","QUERY_POST_LIST","context","response","data","console","log","Promise","reject"],"mappings":";;;AAAA,SAASA,eAAT,EAA0BC,gBAA1B,QAAkD,iBAAlD,C,CACA;;AACA,IAAMC,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,IADH;AAEJC,IAAAA,OAAO,EAAE,MAFL;AAGJC,IAAAA,MAAM,EAAE,KAHJ;AAIJC,IAAAA,YAAY,EAAE;AAJV,GADM;AAQZC,EAAAA,QAAQ,EAAE;AARE,CAAd,C,CAWA;;AACA,IAAMC,OAAO,GAAG;AACdC,EAAAA,OADc,mBACNR,KADM,EACC;AACb,WAAOA,KAAK,CAACC,IAAb;AACD,GAHa;AAKdQ,EAAAA,aALc,yBAKAT,KALA,EAKO;AACnB,WAAOA,KAAK,CAACM,QAAb;AACD;AAPa,CAAhB,C,CAUA;;AACA,IAAMI,SAAS,GAAG;AAChBC,EAAAA,OADgB,mBACRX,KADQ,EACDC,IADC,EACK;AACnBD,IAAAA,KAAK,CAACC,IAAN,GAAaA,IAAb;AACD,GAHe;AAKhBW,EAAAA,aALgB,yBAKFZ,KALE,EAKKM,QALL,EAKe;AAC7BN,IAAAA,KAAK,CAACM,QAAN,GAAiBA,QAAjB;AACD;AAPe,CAAlB,C,CAUA;;AACA,IAAMO,OAAO,GAAG;AACdC,EAAAA,eADc,wCAC+B;AAAA,QAA3Bd,KAA2B,QAA3BA,KAA2B;AAAA,QAApBe,MAAoB,QAApBA,MAAoB;AAAA,QAARd,IAAQ,SAARA,IAAQ;AAC3Cc,IAAAA,MAAM,CAAC,SAAD,EAAYd,IAAZ,CAAN;AACD,GAHa;AAIde,EAAAA,gBAJc,mCAIsBC,MAJtB,EAI8B;AAAA,QAAzBjB,KAAyB,SAAzBA,KAAyB;AAAA,QAAlBe,MAAkB,SAAlBA,MAAkB;AAC1Cd,IAAAA,IAAI,GAAGF,gBAAgB,CAACkB,MAAD,CAAvB;AACAF,IAAAA,MAAM,CAAC,SAAD,EAAYd,IAAZ,CAAN;AACD,GAPa;AASRiB,EAAAA,eATQ,2BASQC,OATR,EASiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEJrB,eAAe,EAFX;;AAAA;AAErBsB,cAAAA,QAFqB;AAG3BD,cAAAA,OAAO,CAACJ,MAAR,CAAe,eAAf,EAAgCK,QAAQ,CAACC,IAAzC;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAArB;AAJ2B,+CAKpBD,QAAQ,CAACC,IALW;;AAAA;AAAA;AAAA;AAAA,+CAOpBG,OAAO,CAACC,MAAR,aAPoB;;AAAA;AAAA;AAS3BH,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAT2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW9B;AApBa,CAAhB;AAuBA,eAAe;AACbvB,EAAAA,KAAK,EAALA,KADa;AAEbU,EAAAA,SAAS,EAATA,SAFa;AAGbG,EAAAA,OAAO,EAAPA,OAHa;AAIbN,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import { updatePostsList, readPostByPostId } from \"../api/post_api\";\n// state\nconst state = {\n  post: {\n    title: \"제목\",\n    content: \"빈 내용\",\n    author: \"작성자\",\n    modifiedDate: \"일자\",\n  },\n\n  postList: [],\n};\n\n// getters\nconst getters = {\n  getPost(state) {\n    return state.post;\n  },\n\n  GET_POST_LIST(state) {\n    return state.postList;\n  },\n};\n\n// mutations\nconst mutations = {\n  setPost(state, post) {\n    state.post = post;\n  },\n\n  SET_POST_LIST(state, postList) {\n    state.postList = postList;\n  },\n};\n\n// actions\nconst actions = {\n  QUERY_READ_POST({ state, commit }, { post }) {\n    commit(\"setPost\", post);\n  },\n  QUERY_READ_POST2({ state, commit }, postId) {\n    post = readPostByPostId(postId);\n    commit(\"setPost\", post);\n  },\n\n  async QUERY_POST_LIST(context) {\n    try {\n      const response = await updatePostsList();\n      context.commit(\"SET_POST_LIST\", response.data);\n      console.log(response.data)\n      return response.data;\n    } catch (e) {\n      return Promise.reject(e);\n    } finally {\n      console.log('End');\n    }\n  },\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"]}]}