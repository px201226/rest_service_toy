{"remainingRequest":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\src\\api\\http.js","dependencies":[{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\src\\api\\http.js","mtime":1609732734471},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lee-Gi-Su\\IdeaProjects\\restapi\\springboot_board_with_vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBzdG9yZSBmcm9tICcuLi9zdG9yZSc7CnZhciBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7CiAgLy9iYXNlVVJMIDogImh0dHA6Ly9lYzItMTMtMTI1LTE3MC0yMTAuYXAtbm9ydGhlYXN0LTIuY29tcHV0ZS5hbWF6b25hd3MuY29tIiwKICBiYXNlVVJMOiAiaHR0cDovL2xvY2FsaG9zdDo4MDgwIiwKICB3aXRoQ3JlZGVudGlhbHM6IHRydWUgLy8g7ISk7KCV7ZW07JW8IOy/oO2CpOqwgCBSZXF1ZXN07JeQIOyggOyepeuQmOyWtCDshLjshZjsnbQg7Jyg7KeA65CoCgp9KTsKLyoKICAgIOuqqOuToCDsmpTssq0g7KCEIGhlYWRlcuyXkCBhY2Nlc3NfdG9rZW7snYQg64u07JWEIOyghOyGoe2VnOuLpC4KICovCgppbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykgewogIHZhciBqd3RUb2tlbiA9IHN0b3JlLmdldHRlcnMuR0VUX0pXVF9UT0tFTjsKICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnand0VG9rZW4nKTsKCiAgaWYgKGp3dFRva2VuICE9PSBudWxsKSB7CiAgICBjb25maWcuaGVhZGVycy5jb21tb25bJ1gtQVVUSC1UT0tFTiddID0gand0VG9rZW47CiAgfQoKICBjb25zb2xlLmxvZygnSW50ZXJjZXB0b3JzIFJlcXVlc3QgaXMnLCBjb25maWcsIG5ldyBEYXRlKCkpOwogIHJldHVybiBjb25maWc7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIGNvbnNvbGUubG9nKCdJbnRlcmNlcHRvcnMgUmVxdWVzdCBFcnJvciBpcycsIGVycm9yLnJlc3BvbnNlLCBuZXcgRGF0ZSgpKTsKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwp9KTsKaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAvLyBjb25zb2xlLmxvZygnSW50ZXJjZXB0b3JzIFJlc3BvbnNlIGlzICcsIHJlc3BvbnNlLCBuZXcgRGF0ZSgpKTsKICByZXR1cm4gcmVzcG9uc2U7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIC8vIGNvbnNvbGUubG9nKCdJbnRlcmNlcHRvcnMgUmVzcG9uc2UgRXJyb3IgaXMgJywgZXJyb3IucmVzcG9uc2UsIG5ldyBEYXRlKCkpOwogIGlmICghZXJyb3IucmVzcG9uc2UpIHsKICAgIHN0b3JlLmNvbW1pdCgnTkVUV09SS19FUlJPUicpOwogICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKICB9CgogIHZhciBzdGF0dXMgPSBlcnJvci5yZXNwb25zZS5zdGF0dXM7CgogIGlmIChzdGF0dXMgPT09IDUwMCkgewogICAgc3RvcmUuY29tbWl0KCdQVVNIX0VSUk9SX1BBR0UnKTsKICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7CiAgfQoKICBpZiAoc3RhdHVzID09PSA0MDEpIHsKICAgIHZhciBlcnJvckRhdGEgPSBlcnJvci5yZXNwb25zZS5kYXRhOwoKICAgIGlmIChlcnJvckRhdGEuZXJyb3IgIT09ICdpbnZhbGlkX3Rva2VuJykgewogICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogICAgfQoKICAgIGlmIChpc0V4cGlyZWRUb2tlbihlcnJvckRhdGEpKSB7CiAgICAgIHJldHVybiBhdHRlbXB0UmVmcmVzaFRva2VuKCk7CiAgICB9IGVsc2UgewogICAgICBzdG9yZS5jb21taXQoJ0xPR09VVF9XSVRIX1RPS0VOX0lOVkFMSURFJyk7CiAgICAgIHN0b3JlLmNvbW1pdCgnU0VUX1NOQUNLQkFSJywgc2V0U25hY2tCYXJJbmZvKCfthqDtgbAg7KCV67O06rCAIOyemOuqu+uQmOyXiOyKteuLiOuLpC4g64uk7IucIOuhnOq3uOyduCDtlbTso7zshLjsmpQnLCAnZXJyb3InLCAndG9wJykpOwogICAgfQogIH0KCiAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKfSk7CmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlOw=="},{"version":3,"sources":["C:/Users/Lee-Gi-Su/IdeaProjects/restapi/springboot_board_with_vuejs/src/api/http.js"],"names":["axios","store","instance","create","baseURL","withCredentials","interceptors","request","use","config","jwtToken","getters","GET_JWT_TOKEN","localStorage","getItem","headers","common","console","log","Date","error","response","Promise","reject","commit","status","errorData","data","isExpiredToken","attemptRefreshToken","setSnackBarInfo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC7B;AACAC,EAAAA,OAAO,EAAG,uBAFmB;AAG7BC,EAAAA,eAAe,EAAE,IAHY,CAGH;;AAHG,CAAb,CAAjB;AAOA;AACA;AACA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACI,UAAAC,MAAM,EAAI;AACZ,MAAIC,QAAQ,GAAGT,KAAK,CAACU,OAAN,CAAcC,aAA7B;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB;;AACM,MAAIJ,QAAQ,KAAK,IAAjB,EAAuB;AAC5BD,IAAAA,MAAM,CAACM,OAAP,CAAeC,MAAf,CAAsB,cAAtB,IAAwCN,QAAxC;AACM;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCT,MAAvC,EAA+C,IAAIU,IAAJ,EAA/C;AACD,SAAOV,MAAP;AACH,CATL,EAUI,UAAAW,KAAK,EAAI;AACJH,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CE,KAAK,CAACC,QAAnD,EAA6D,IAAIF,IAAJ,EAA7D;AACD,SAAOG,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACH,CAbL;AAiBAlB,QAAQ,CAACI,YAAT,CAAsBe,QAAtB,CAA+Bb,GAA/B,CACG,UAAAa,QAAQ,EAAI;AACX;AAEF,SAAOA,QAAP;AACE,CALJ,EAMG,UAAUD,KAAV,EAAiB;AAChB;AAEA,MAAI,CAACA,KAAK,CAACC,QAAX,EAAqB;AAEpBpB,IAAAA,KAAK,CAACuB,MAAN,CAAa,eAAb;AACA,WAAOF,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACA;;AAED,MAAIK,MAAM,GAAGL,KAAK,CAACC,QAAN,CAAeI,MAA5B;;AACA,MAAIA,MAAM,KAAK,GAAf,EAAoB;AACnBxB,IAAAA,KAAK,CAACuB,MAAN,CAAa,iBAAb;AACA,WAAOF,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACA;;AAED,MAAIK,MAAM,KAAK,GAAf,EAAoB;AACnB,QAAIC,SAAS,GAAGN,KAAK,CAACC,QAAN,CAAeM,IAA/B;;AACA,QAAID,SAAS,CAACN,KAAV,KAAoB,eAAxB,EAAyC;AACxC,aAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACA;;AAED,QAAIQ,cAAc,CAACF,SAAD,CAAlB,EAA+B;AAC9B,aAAOG,mBAAmB,EAA1B;AACA,KAFD,MAEO;AACN5B,MAAAA,KAAK,CAACuB,MAAN,CAAa,4BAAb;AACAvB,MAAAA,KAAK,CAACuB,MAAN,CAAa,cAAb,EAA6BM,eAAe,CAAC,6BAAD,EAAgC,OAAhC,EAAyC,KAAzC,CAA5C;AACA;AACD;;AAED,SAAOR,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACA,CApCJ;AAwCA,eAAelB,QAAf","sourcesContent":["import axios from 'axios';\nimport store from '../store';\n\nconst instance = axios.create({\n\t//baseURL : \"http://ec2-13-125-170-210.ap-northeast-2.compute.amazonaws.com\",\n\tbaseURL : \"http://localhost:8080\",\n\twithCredentials: true,\t\t\t\t// 설정해야 쿠키가 Request에 저장되어 세션이 유지됨\n});\n\n\n/*\n    모든 요청 전 header에 access_token을 담아 전송한다.\n */\ninstance.interceptors.request.use(\n    config => {\n\t\tlet jwtToken = store.getters.GET_JWT_TOKEN; \n\t\tlocalStorage.getItem('jwtToken');\n        if (jwtToken !== null) {\n\t\t\tconfig.headers.common['X-AUTH-TOKEN'] = jwtToken;\n        }\n         console.log('Interceptors Request is', config, new Date());\n        return config\n    },\n    error => {\n         console.log('Interceptors Request Error is', error.response, new Date());\n        return Promise.reject(error);\n    }\n);\n\n\ninstance.interceptors.response.use(\n   response => {\n\t   // console.log('Interceptors Response is ', response, new Date());\n\t \n\t\treturn response;\n   },\n   function (error) {\n\t   // console.log('Interceptors Response Error is ', error.response, new Date());\n\n\t   if (!error.response) {\n\t\t\n\t\t   store.commit('NETWORK_ERROR')\n\t\t   return Promise.reject(error);\n\t   }\n\n\t   let status = error.response.status;\n\t   if (status === 500) {\n\t\t   store.commit('PUSH_ERROR_PAGE');\n\t\t   return Promise.reject(error);\n\t   }\n\n\t   if (status === 401) {\n\t\t   let errorData = error.response.data;\n\t\t   if (errorData.error !== 'invalid_token') {\n\t\t\t   return Promise.reject(error);\n\t\t   }\n\n\t\t   if (isExpiredToken(errorData)) {\n\t\t\t   return attemptRefreshToken();\n\t\t   } else {\n\t\t\t   store.commit('LOGOUT_WITH_TOKEN_INVALIDE');\n\t\t\t   store.commit('SET_SNACKBAR', setSnackBarInfo('토큰 정보가 잘못되었습니다. 다시 로그인 해주세요', 'error', 'top'));\n\t\t   }\n\t   }\n\n\t   return Promise.reject(error);\n   }\n);\n\n\nexport default instance;"]}]}